/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { JobDescriptionService } from "../jobDescription.service";
import { JobDescriptionCreateInput } from "./JobDescriptionCreateInput";
import { JobDescriptionWhereInput } from "./JobDescriptionWhereInput";
import { JobDescriptionWhereUniqueInput } from "./JobDescriptionWhereUniqueInput";
import { JobDescriptionFindManyArgs } from "./JobDescriptionFindManyArgs";
import { JobDescriptionUpdateInput } from "./JobDescriptionUpdateInput";
import { JobDescription } from "./JobDescription";

export class JobDescriptionGrpcControllerBase {
  constructor(protected readonly service: JobDescriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobDescription })
  @GrpcMethod("JobDescriptionService", "createJobDescription")
  async createJobDescription(
    @common.Body() data: JobDescriptionCreateInput
  ): Promise<JobDescription> {
    return await this.service.createJobDescription({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requiredSkills: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobDescription] })
  @ApiNestedQuery(JobDescriptionFindManyArgs)
  @GrpcMethod("JobDescriptionService", "jobDescriptions")
  async jobDescriptions(
    @common.Req() request: Request
  ): Promise<JobDescription[]> {
    const args = plainToClass(JobDescriptionFindManyArgs, request.query);
    return this.service.jobDescriptions({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requiredSkills: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobDescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobDescriptionService", "jobDescription")
  async jobDescription(
    @common.Param() params: JobDescriptionWhereUniqueInput
  ): Promise<JobDescription | null> {
    const result = await this.service.jobDescription({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requiredSkills: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobDescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobDescriptionService", "updateJobDescription")
  async updateJobDescription(
    @common.Param() params: JobDescriptionWhereUniqueInput,
    @common.Body() data: JobDescriptionUpdateInput
  ): Promise<JobDescription | null> {
    try {
      return await this.service.updateJobDescription({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          requiredSkills: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobDescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobDescriptionService", "deleteJobDescription")
  async deleteJobDescription(
    @common.Param() params: JobDescriptionWhereUniqueInput
  ): Promise<JobDescription | null> {
    try {
      return await this.service.deleteJobDescription({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          requiredSkills: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
